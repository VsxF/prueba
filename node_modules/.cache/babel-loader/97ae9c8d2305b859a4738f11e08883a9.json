{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\raenu\\\\Documents\\\\Proyectos\\\\prueba\\\\src\\\\componentes\\\\task1.js\";\n\nfunction Task1() {\n  let numbers = findNumbers();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: \"Los numeros rectangulares, tal que a + b + c = 100 son :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: [\"a: \", numbers[0]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: [\"b: \", numbers[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: [\"c: \", numbers[2]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n} //Encuentra los numeros solicitados\n\n\n_c = Task1;\n\nfunction findNumbers() {\n  let squares = getSquares();\n  let numbers = []; //console.log(squares)\n\n  for (let i = 0; i < squares.length; i++) {\n    const a = squares[i];\n\n    for (let j = 0; j < squares.length; j++) {\n      const b = squares[j];\n\n      for (let k = 0; k < squares.length; k++) {\n        const c = squares[k];\n\n        if (getRectangle(a, b, c)) {\n          console.log(a, b, c);\n          numbers.push(a);\n          numbers.push(b);\n          numbers.push(c);\n        }\n      }\n    }\n  }\n\n  return numbers;\n} //Determina si los numeros suman 1000\n\n\nfunction getSum(a, b, c) {\n  return a + b + c === 1000 ? true : false;\n} //Determina si son numeros rectangulares\n\n\nfunction getRectangle(a, b, c) {\n  let aux = a ^ 2 + b ^ 2;\n  let aux2 = c ^ 2;\n  return aux === aux2 ? true : false; //return ((a ^ 2 + b ^ 2) === (c ^ 2)) ? true : false\n} //Encuentra todas las raices posibles < sqrt (1000)\n\n\nfunction getSquares() {\n  let squares = [1, 2]; //max square < 1000 = 31\n\n  for (let i = 1; i < 31; i++) {\n    squares.push(i * i);\n  }\n\n  return squares;\n}\n\nexport default Task1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task1\");","map":{"version":3,"sources":["C:/Users/raenu/Documents/Proyectos/prueba/src/componentes/task1.js"],"names":["Task1","numbers","findNumbers","squares","getSquares","i","length","a","j","b","k","c","getRectangle","console","log","push","getSum","aux","aux2"],"mappings":";;;AAAA,SAASA,KAAT,GAAiB;AACb,MAAIC,OAAO,GAAGC,WAAW,EAAzB;AAEA,sBACI;AAAA,4BACI;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA,wBAAuBD,OAAO,CAAC,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA,wBAAuBA,OAAO,CAAC,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA,wBAAuBA,OAAO,CAAC,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,C,CAED;;;KAhBSD,K;;AAiBT,SAASE,WAAT,GAAuB;AACnB,MAAIC,OAAO,GAAGC,UAAU,EAAxB;AACA,MAAIH,OAAO,GAAG,EAAd,CAFmB,CAGnB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAME,CAAC,GAAGJ,OAAO,CAACE,CAAD,CAAjB;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACG,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;AACrC,YAAMC,CAAC,GAAGN,OAAO,CAACK,CAAD,CAAjB;;AAEA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAAO,CAACG,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACrC,cAAMC,CAAC,GAAGR,OAAO,CAACO,CAAD,CAAjB;;AAEA,YAAIE,YAAY,CAACL,CAAD,EAAIE,CAAJ,EAAOE,CAAP,CAAhB,EAA2B;AACvBE,UAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ,EAAeE,CAAf,EAAkBE,CAAlB;AACAV,UAAAA,OAAO,CAACc,IAAR,CAAaR,CAAb;AACAN,UAAAA,OAAO,CAACc,IAAR,CAAaN,CAAb;AACAR,UAAAA,OAAO,CAACc,IAAR,CAAaJ,CAAb;AACH;AAEJ;AACJ;AAEJ;;AACD,SAAOV,OAAP;AACH,C,CAED;;;AACA,SAASe,MAAT,CAAgBT,CAAhB,EAAmBE,CAAnB,EAAsBE,CAAtB,EAAyB;AACrB,SAAQJ,CAAC,GAAGE,CAAJ,GAAQE,CAAR,KAAc,IAAf,GAAuB,IAAvB,GAA8B,KAArC;AACH,C,CAED;;;AACA,SAASC,YAAT,CAAsBL,CAAtB,EAAyBE,CAAzB,EAA4BE,CAA5B,EAA+B;AAC3B,MAAIM,GAAG,GAAGV,CAAC,GAAC,IAAIE,CAAN,GAAQ,CAAlB;AACA,MAAIS,IAAI,GAAGP,CAAC,GAAC,CAAb;AACA,SAAQM,GAAG,KAAKC,IAAT,GAAiB,IAAjB,GAAwB,KAA/B,CAH2B,CAI3B;AACH,C,CAED;;;AACA,SAASd,UAAT,GAAsB;AAClB,MAAID,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAd,CADkB,CAGlB;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBF,IAAAA,OAAO,CAACY,IAAR,CAAaV,CAAC,GAACA,CAAf;AACH;;AACD,SAAOF,OAAP;AACH;;AAED,eAAeH,KAAf","sourcesContent":["function Task1() {\r\n    let numbers = findNumbers()\r\n    \r\n    return (\r\n        <div>\r\n            <h2 align=\"center\">Los numeros rectangulares, tal que a + b + c = 100 son :</h2>\r\n            <h2 align=\"center\">a: {numbers[0]}</h2>\r\n            <h2 align=\"center\">b: {numbers[1]}</h2>\r\n            <h2 align=\"center\">c: {numbers[2]}</h2>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Encuentra los numeros solicitados\r\nfunction findNumbers() {\r\n    let squares = getSquares()\r\n    let numbers = []\r\n    //console.log(squares)\r\n    for (let i = 0; i < squares.length; i++) {\r\n        const a = squares[i];\r\n\r\n        for (let j = 0; j < squares.length; j++) {\r\n            const b = squares[j];\r\n\r\n            for (let k = 0; k < squares.length; k++) {\r\n                const c = squares[k];\r\n\r\n                if (getRectangle(a, b, c)) {\r\n                    console.log(a, b, c)\r\n                    numbers.push(a)\r\n                    numbers.push(b)\r\n                    numbers.push(c)\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    return numbers;\r\n}\r\n\r\n//Determina si los numeros suman 1000\r\nfunction getSum(a, b, c) {\r\n    return (a + b + c === 1000) ? true : false;\r\n}\r\n\r\n//Determina si son numeros rectangulares\r\nfunction getRectangle(a, b, c) {\r\n    let aux = a^2 + b^2\r\n    let aux2 = c^2\r\n    return (aux === aux2) ? true : false;\r\n    //return ((a ^ 2 + b ^ 2) === (c ^ 2)) ? true : false\r\n}\r\n\r\n//Encuentra todas las raices posibles < sqrt (1000)\r\nfunction getSquares() {\r\n    let squares = [1, 2]\r\n\r\n    //max square < 1000 = 31\r\n    for (let i = 1; i < 31; i++) {\r\n        squares.push(i*i)\r\n    }\r\n    return squares\r\n}\r\n\r\nexport default Task1;\r\n"]},"metadata":{},"sourceType":"module"}