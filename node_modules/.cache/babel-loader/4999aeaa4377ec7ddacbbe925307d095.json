{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\raenu\\\\Documents\\\\Proyectos\\\\prueba\\\\src\\\\componentes\\\\task1.js\";\n\nfunction Task1() {\n  let numbers = [0, 1, 2];\n  this.findNumbers();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: \"Los numeros rectangulares, tal que a + b + c = 100 son :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: [\"a: \", numbers[0]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: [\"b: \", numbers[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: [\"c: \", numbers[2]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 13\n  }, this);\n} //Determina si los numeros suman 1000\n\n\n_c = Task1;\n\nfunction getSum(a, b, c) {\n  return a + b + c === 1000 ? true : false;\n} //Determina si son numeros rectangulares\n\n\nfunction getRectangle(a, b, c) {\n  return a ^ 2 + b ^ 2 === c ^ 2 ? true : false;\n} //Encuentra todas las raices posibles < sqrt (1000)\n\n\nfunction getSquares() {\n  let squares = [1, 2]; //max square < 1000 = 31\n\n  for (let i = 0; i < 31; i++) {//squares.push(i*i)\n  }\n\n  return [1, 2];\n}\n\nexport default Task1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task1\");","map":{"version":3,"sources":["C:/Users/raenu/Documents/Proyectos/prueba/src/componentes/task1.js"],"names":["Task1","numbers","findNumbers","getSum","a","b","c","getRectangle","getSquares","squares","i"],"mappings":";;;AAAA,SAASA,KAAT,GAAiB;AACb,MAAIC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAd;AACI,OAAKC,WAAL;AACA,sBACI;AAAA,4BACA;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA,wBAAuBD,OAAO,CAAC,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA,wBAAuBA,OAAO,CAAC,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAHA,eAIA;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA,wBAAuBA,OAAO,CAAC,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQP,C,CAED;;;KAbSD,K;;AAcT,SAASG,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAwB;AACpB,SAAQF,CAAC,GAAGC,CAAJ,GAAQC,CAAR,KAAc,IAAf,GAAuB,IAAvB,GAA8B,KAArC;AACH,C,CAED;;;AACA,SAASC,YAAT,CAAsBH,CAAtB,EAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAC3B,SAAQF,CAAC,GAAC,IAAIC,CAAN,GAAQ,MAAMC,CAAd,GAAgB,CAAjB,GAAsB,IAAtB,GAA6B,KAApC;AACH,C,CAED;;;AACA,SAASE,UAAT,GAAsB;AAClB,MAAIC,OAAO,GAAG,CAAC,CAAD,EAAG,CAAH,CAAd,CADkB,CAGlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B,CACzB;AACH;;AACD,SAAO,CAAC,CAAD,EAAG,CAAH,CAAP;AACH;;AAED,eAAeV,KAAf","sourcesContent":["function Task1() {\r\n    let numbers = [0, 1, 2]\r\n        this.findNumbers()\r\n        return (\r\n            <div>\r\n            <h2 align=\"center\">Los numeros rectangulares, tal que a + b + c = 100 son :</h2>\r\n            <h2 align=\"center\">a: {numbers[0]}</h2>\r\n            <h2 align=\"center\">b: {numbers[1]}</h2>\r\n            <h2 align=\"center\">c: {numbers[2]}</h2>\r\n        </div>\r\n        )\r\n}\r\n\r\n//Determina si los numeros suman 1000\r\nfunction getSum(a, b, c){\r\n    return (a + b + c === 1000) ? true : false;\r\n} \r\n\r\n//Determina si son numeros rectangulares\r\nfunction getRectangle(a, b, c) {\r\n    return (a^2 + b^2 === c^2) ? true : false;\r\n} \r\n\r\n//Encuentra todas las raices posibles < sqrt (1000)\r\nfunction getSquares() {\r\n    let squares = [1,2]\r\n    \r\n    //max square < 1000 = 31\r\n    for (let i = 0; i < 31; i++) {\r\n        //squares.push(i*i)\r\n    }\r\n    return [1,2]\r\n}\r\n\r\nexport default Task1;\r\n"]},"metadata":{},"sourceType":"module"}